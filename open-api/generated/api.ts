/* tslint:disable */
/* eslint-disable */
/**
 * System rezerwacji miejsc na eventy
 * Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: XXX@pw.edu.pl
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * 
     * @type {number}
     * @memberof Category
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Category
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'id': number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'freePlace'?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'startTime'?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'endTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'placeSchema'?: string;
    /**
     * 
     * @type {EventStatus}
     * @memberof Event
     */
    'status'?: EventStatus;
    /**
     * 
     * @type {Array<Category>}
     * @memberof Event
     */
    'categories'?: Array<Category>;
}


/**
 * event status
 * @export
 * @enum {string}
 */

export const EventStatus = {
    InFuture: 'inFuture',
    Pending: 'pending',
    Done: 'done',
    Cancelled: 'cancelled'
} as const;

export type EventStatus = typeof EventStatus[keyof typeof EventStatus];


/**
 * 
 * @export
 * @interface LoginOrganizer200Response
 */
export interface LoginOrganizer200Response {
    /**
     * The session token.
     * @type {string}
     * @memberof LoginOrganizer200Response
     */
    'sessionToken'?: string;
}
/**
 * 
 * @export
 * @interface Organizer
 */
export interface Organizer {
    /**
     * 
     * @type {number}
     * @memberof Organizer
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Organizer
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organizer
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Organizer
     */
    'password'?: string;
    /**
     * 
     * @type {Array<Event>}
     * @memberof Organizer
     */
    'events'?: Array<Event>;
    /**
     * User Status
     * @type {string}
     * @memberof Organizer
     */
    'status'?: OrganizerStatusEnum;
}

export const OrganizerStatusEnum = {
    Pending: 'pending',
    Confirmed: 'confirmed'
} as const;

export type OrganizerStatusEnum = typeof OrganizerStatusEnum[keyof typeof OrganizerStatusEnum];

/**
 * 
 * @export
 * @interface ReservationDTO
 */
export interface ReservationDTO {
    /**
     * 
     * @type {number}
     * @memberof ReservationDTO
     */
    'eventId'?: number;
    /**
     * 
     * @type {number}
     * @memberof ReservationDTO
     */
    'placeId'?: number;
    /**
     * 
     * @type {string}
     * @memberof ReservationDTO
     */
    'reservationToken'?: string;
}

/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new category
         * @param {string} categoryName name of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategories: async (categoryName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryName' is not null or undefined
            assertParamExists('addCategories', 'categoryName', categoryName)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)

            if (categoryName !== undefined) {
                localVarQueryParameter['categoryName'] = categoryName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new category
         * @param {string} categoryName name of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategories(categoryName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategories(categoryName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return list of all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new category
         * @param {string} categoryName name of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategories(categoryName: string, options?: any): AxiosPromise<Category> {
            return localVarFp.addCategories(categoryName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of all categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<Array<Category>> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * 
     * @summary Create new category
     * @param {string} categoryName name of category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public addCategories(categoryName: string, options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).addCategories(categoryName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return list of all categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(options?: AxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent: async (title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'title' is not null or undefined
            assertParamExists('addEvent', 'title', title)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('addEvent', 'name', name)
            // verify required parameter 'freePlace' is not null or undefined
            assertParamExists('addEvent', 'freePlace', freePlace)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('addEvent', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('addEvent', 'endTime', endTime)
            // verify required parameter 'categories' is not null or undefined
            assertParamExists('addEvent', 'categories', categories)
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (freePlace !== undefined) {
                localVarQueryParameter['freePlace'] = freePlace;
            }

            if (placeSchema !== undefined) {
                localVarQueryParameter['placeSchema'] = placeSchema;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (categories) {
                localVarQueryParameter['categories'] = categories;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEvent: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCategory: async (categoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            assertParamExists('getByCategory', 'categoryId', categoryId)
            const localVarPath = `/events/getByCategory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEventById', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyEvents: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/events/my`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [event] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEvent: async (id: string, event?: Event, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchEvent', 'id', id)
            const localVarPath = `/events/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(event, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelEvent(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelEvent(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCategory(categoryId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCategory(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventById(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyEvents(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyEvents(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [event] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEvent(id: string, event?: Event, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEvent(id, event, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new event
         * @param {string} title title of Event
         * @param {string} name title of Event
         * @param {number} freePlace No of free places
         * @param {number} startTime Unix time stamp of begin of event
         * @param {number} endTime Unix time stamp of end of event
         * @param {Array<number>} categories Unix time stamp of end of event
         * @param {string} [placeSchema] seralized place schema
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: any): AxiosPromise<Event> {
            return localVarFp.addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel event
         * @param {string} id id of Event
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelEvent(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.cancelEvent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of all events in category
         * @param {number} categoryId ID of category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCategory(categoryId: number, options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.getByCategory(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single event
         * @summary Find event by ID
         * @param {number} id ID of event to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(id: number, options?: any): AxiosPromise<Event> {
            return localVarFp.getEventById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of all events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.getEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return list of events made by organizer, according to session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyEvents(options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.getMyEvents(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary patch existing event
         * @param {string} id id of Event
         * @param {Event} [event] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEvent(id: string, event?: Event, options?: any): AxiosPromise<void> {
            return localVarFp.patchEvent(id, event, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     * 
     * @summary Add new event
     * @param {string} title title of Event
     * @param {string} name title of Event
     * @param {number} freePlace No of free places
     * @param {number} startTime Unix time stamp of begin of event
     * @param {number} endTime Unix time stamp of end of event
     * @param {Array<number>} categories Unix time stamp of end of event
     * @param {string} [placeSchema] seralized place schema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public addEvent(title: string, name: string, freePlace: number, startTime: number, endTime: number, categories: Array<number>, placeSchema?: string, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).addEvent(title, name, freePlace, startTime, endTime, categories, placeSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel event
     * @param {string} id id of Event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public cancelEvent(id: string, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).cancelEvent(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return list of all events in category
     * @param {number} categoryId ID of category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public getByCategory(categoryId: number, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).getByCategory(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single event
     * @summary Find event by ID
     * @param {number} id ID of event to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public getEventById(id: number, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).getEventById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return list of all events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public getEvents(options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).getEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return list of events made by organizer, according to session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public getMyEvents(options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).getMyEvents(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary patch existing event
     * @param {string} id id of Event
     * @param {Event} [event] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    public patchEvent(id: string, event?: Event, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).patchEvent(id, event, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EventOrganizerApi - axios parameter creator
 * @export
 */
export const EventOrganizerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirm: async (id: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirm', 'id', id)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('confirm', 'code', code)
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrganizer', 'id', id)
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOrganizer: async (email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('loginOrganizer', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginOrganizer', 'password', password)
            const localVarPath = `/organizer/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [organizer] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrganizer: async (id: string, organizer?: Organizer, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchOrganizer', 'id', id)
            const localVarPath = `/organizer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication token required
            await setApiKeyToObject(localVarHeaderParameter, "sessionToken", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(organizer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (name: string, email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('signUp', 'name', name)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('signUp', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('signUp', 'password', password)
            const localVarPath = `/organizer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventOrganizerApi - functional programming interface
 * @export
 */
export const EventOrganizerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventOrganizerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirm(id: string, code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organizer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirm(id, code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOrganizer(email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginOrganizer200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginOrganizer(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [organizer] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchOrganizer(id: string, organizer?: Organizer, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchOrganizer(id, organizer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(name: string, email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organizer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(name, email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventOrganizerApi - factory interface
 * @export
 */
export const EventOrganizerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventOrganizerApiFp(configuration)
    return {
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {string} code code from email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirm(id: string, code: string, options?: any): AxiosPromise<Organizer> {
            return localVarFp.confirm(id, code, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Confirm orginizer account
         * @param {string} id id of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizer(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteOrganizer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logs organizer into the system
         * @param {string} email The organizer email for login
         * @param {string} password the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOrganizer(email: string, password: string, options?: any): AxiosPromise<LoginOrganizer200Response> {
            return localVarFp.loginOrganizer(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch orginizer account
         * @param {string} id id of Organizer
         * @param {Organizer} [organizer] Update an existent user in the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchOrganizer(id: string, organizer?: Organizer, options?: any): AxiosPromise<void> {
            return localVarFp.patchOrganizer(id, organizer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create orginizer account
         * @param {string} name name of Organizer
         * @param {string} email email of Organizer
         * @param {string} password password of Organizer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(name: string, email: string, password: string, options?: any): AxiosPromise<Organizer> {
            return localVarFp.signUp(name, email, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventOrganizerApi - object-oriented interface
 * @export
 * @class EventOrganizerApi
 * @extends {BaseAPI}
 */
export class EventOrganizerApi extends BaseAPI {
    /**
     * 
     * @summary Confirm orginizer account
     * @param {string} id id of Organizer
     * @param {string} code code from email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public confirm(id: string, code: string, options?: AxiosRequestConfig) {
        return EventOrganizerApiFp(this.configuration).confirm(id, code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Confirm orginizer account
     * @param {string} id id of Organizer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public deleteOrganizer(id: string, options?: AxiosRequestConfig) {
        return EventOrganizerApiFp(this.configuration).deleteOrganizer(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logs organizer into the system
     * @param {string} email The organizer email for login
     * @param {string} password the password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public loginOrganizer(email: string, password: string, options?: AxiosRequestConfig) {
        return EventOrganizerApiFp(this.configuration).loginOrganizer(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch orginizer account
     * @param {string} id id of Organizer
     * @param {Organizer} [organizer] Update an existent user in the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public patchOrganizer(id: string, organizer?: Organizer, options?: AxiosRequestConfig) {
        return EventOrganizerApiFp(this.configuration).patchOrganizer(id, organizer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create orginizer account
     * @param {string} name name of Organizer
     * @param {string} email email of Organizer
     * @param {string} password password of Organizer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventOrganizerApi
     */
    public signUp(name: string, email: string, password: string, options?: AxiosRequestConfig) {
        return EventOrganizerApiFp(this.configuration).signUp(name, email, password, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReservationApi - axios parameter creator
 * @export
 */
export const ReservationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new reservation
         * @param {string} reservationToken token of reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation: async (reservationToken: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationToken' is not null or undefined
            assertParamExists('deleteReservation', 'reservationToken', reservationToken)
            const localVarPath = `/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reservationToken !== undefined) {
                localVarQueryParameter['reservationToken'] = reservationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new reservation
         * @param {number} eventId ID of event
         * @param {number} [placeID] ID of place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeReservation: async (eventId: number, placeID?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('makeReservation', 'eventId', eventId)
            const localVarPath = `/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (eventId !== undefined) {
                localVarQueryParameter['eventId'] = eventId;
            }

            if (placeID !== undefined) {
                localVarQueryParameter['placeID'] = placeID;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservationApi - functional programming interface
 * @export
 */
export const ReservationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new reservation
         * @param {string} reservationToken token of reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReservation(reservationToken: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReservation(reservationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new reservation
         * @param {number} eventId ID of event
         * @param {number} [placeID] ID of place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async makeReservation(eventId: number, placeID?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservationDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.makeReservation(eventId, placeID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReservationApi - factory interface
 * @export
 */
export const ReservationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new reservation
         * @param {string} reservationToken token of reservation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReservation(reservationToken: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReservation(reservationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new reservation
         * @param {number} eventId ID of event
         * @param {number} [placeID] ID of place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        makeReservation(eventId: number, placeID?: number, options?: any): AxiosPromise<ReservationDTO> {
            return localVarFp.makeReservation(eventId, placeID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReservationApi - object-oriented interface
 * @export
 * @class ReservationApi
 * @extends {BaseAPI}
 */
export class ReservationApi extends BaseAPI {
    /**
     * 
     * @summary Create new reservation
     * @param {string} reservationToken token of reservation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public deleteReservation(reservationToken: string, options?: AxiosRequestConfig) {
        return ReservationApiFp(this.configuration).deleteReservation(reservationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new reservation
     * @param {number} eventId ID of event
     * @param {number} [placeID] ID of place
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservationApi
     */
    public makeReservation(eventId: number, placeID?: number, options?: AxiosRequestConfig) {
        return ReservationApiFp(this.configuration).makeReservation(eventId, placeID, options).then((request) => request(this.axios, this.basePath));
    }
}


